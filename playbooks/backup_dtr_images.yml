###
# Copyright (2017) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###
---
- hosts: localhost
  gather_facts: false
  force_handlers: true
  become: true

  vars_files:
    - includes/internal_vars.yml

  environment:
    "{{ env }}"

  tasks:

    - name: Mount the NFS Share
      mount:
        fstype: nfs
        src: "{{ ivar_nfs_server }}:{{ images_folder }}"
        path: "{{ ivar_nfs_mountpoint }}"
        opts: "{{ nfs_mount_options }}"
        state: mounted
      notify:  unmount the NFS Share
#
# Get a timestamp, will be used to name the backup
#
    - name: Get TimeStamp
      command: date -u '+%Y_%m_%d_%H%M%S'
      register: timestamp
    - name: Store the timestamp
      set_fact:
        timestamp: "{{ timestamp.stdout }}"

    - include_tasks: includes/find_dtr.yml
      vars:
        ping_servers: "{{ groups.dtr }}"
    - fail: 
      when: dtr_instance == ".none." 

#
# collect some metadata from a DTR node
#
    - name: Creates directory
      delegate_to: "{{ dtr_instance }}"
      file:
        path: /root/scripts
        state: directory

    - name: Copy util to backup VM
      delegate_to: "{{ dtr_instance }}"
      template:
        src: ../templates/dtr_get_info.sh.j2
        dest: /root/scripts/dtr_get_info.sh
        mode: 0744

    - name: Get the replica ID
      shell: /root/scripts/dtr_get_info.sh replica
      delegate_to: "{{ dtr_instance }}"
      register: res 

    - set_fact:
        replica_id: "{{ res.stdout }}" 

    - name: Get the DTR version number
      delegate_to: "{{ dtr_instance }}"
      shell: /root/scripts/dtr_get_info.sh version
      register: res

    - set_fact:
        detected_dtr_version: "{{ res.stdout }}"

    - debug:
        msg: "dtr_version: {{ detected_dtr_version }}"
        verbosity: 1

    - set_fact:
        backup_name:  "backup_dtr_data_{{ replica_id }}_{{ inventory_hostname }}_{{ timestamp }}"
      when: backup_name is undefined

    - name: Creates directory
      file:
        path: /tmp/scripts
        state: directory

    - name: Copy backup script 
      template:
        src: ../templates/backup_dtr_images.sh.j2
        dest: /tmp/scripts/backup_dtr_images.sh
        mode: 0744

    - name: Backup the image data
      shell: /tmp/scripts/backup_dtr_images.sh {{ backup_name }}
      register: res

    - name: Create a temporary directory to receive files that contains backup metadata
      tempfile:
        state: directory
        suffix: temp
      register: res

    - template:
        src: ../templates/backup_meta.yml.j2
        dest: "{{ res.path }}/meta.yml"

    - copy:
         src: "{{ item }}"
         dest: "{{ res.path }}/"
      with_items:
        - ../hosts
        - ../group_vars

    - name: Save the backup Metadata as well
      archive:
        path:
          - "{{ res.path }}/"
        dest: "{{ backup_dest }}/{{ backup_name }}.vars.tgz"

  handlers:
    - name: unmount the NFS Share
      mount:
        fstype: nfs
        src: "{{ ivar_nfs_server }}:{{ images_folder }}"
        path: "{{ ivar_nfs_mountpoint }}"
        opts: "{{ nfs_mount_options }}"
        state: unmounted


