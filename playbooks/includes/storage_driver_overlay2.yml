###
# Copyright (2017) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
### 
---
    - name: Verify data drives special file
      stat:
        path: "{{ item }}"
        follow: yes
      register: res
      changed_when: false
      with_items:
        - "{{ disk2 }}"

    - name: "Cleanup files under /dev"
      when: fcoe is defined and item.stat.exists == true and item.stat.isblk != true
      file:
        path: "{{ item.item }}"
        state: absent
      with_items:
        - "{{ res.results }}"

    - name: Enable FCOE Stack if needed
      when: fcoe is defined
      yum:
        name: "{{ packages }}"
        state: 'latest'
        update_cache: yes
      vars:
        packages:
          - fcoe-utils
          - lldpad
          - NetworkManager-glib
          - device-mapper-multipath

    - name: Enable multipath
      yum:
        name: 'device-mapper-multipath'
        state: 'latest'
        update_cache: yes

    - name: Enable FCOE Device
      when: fcoe is defined
      template:
        src: ../templates/fcoe-cfg-ethx.j2
        dest: /etc/fcoe/cfg-{{ item }}
      with_items:
        - "{{ fcoe_devices }}"

    - name: Start DCDB daemon
      when: fcoe is defined
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      with_items:
        - lldpad

    - name: Bring FCOE devices Up
      when: fcoe is defined
      shell: ip link  set dev "{{ item }}" up
      with_items:
        - "{{ fcoe_devices }}"
      
    - name: Copy multipath configuration file
      when: fcoe is defined
      template:
        dest: /etc/multipath.conf
        src: ../templates/multipath.conf.j2
      register: res

    - name: Start fcoe, llpad and multipathd services
      when: fcoe is defined
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      with_items:
        - fcoe

    - name: Start multipathd service
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      with_items:
        - multipathd

    - name: Wait until FCOE device shows up
      when: fcoe is defined
      stat: 
        path: "{{ item }}"
      register: res
      with_items:
        - "{{ disk2 }}"
      until: res.stat.exists == true
      delay: 2
      retries:  5

    - name: Check for partitions on disk
      parted:
        state: info
        device: "{{ disk2 }}"
        number: 1
      register: DiskInfo

    - set_fact:
        partPresent: "{{ DiskInfo.partitions[0] is defined }}"


    - name: Create partition on second disk
      parted:
        label: gpt
        part_type: primary
        device: "{{ disk2 }}"
        flags: [ lvm ]
        state: present
        number: 1
        part_start: 0%
        part_end: 100%
      when: partPresent == false
        
    - name: Create Docker VG
      lvg:
        vg: docker
        pvs: "{{ disk2_part }}"
      when: partPresent == false

    - name: Create lvm logical volume
      lvol:
        lv: var_lib_docker
        opts: --wipesignatures y
        vg: docker
        size: 100%VG
      when: partPresent == false

    - name: Create XFS partition
      filesystem:
        dev: /dev/docker/var_lib_docker
        opts: -n ftype=1
        fstype: xfs

    - name: Create /etc/docker directory
      file:
        path: /etc/docker
        state: directory

    - name: Config Docker daemon
      template: src=../templates/daemon.overlay2.json.j2 dest=/etc/docker/daemon.json

    - name: Mount data drive in /var/lib/docker
      mount:
        src: /dev/docker/var_lib_docker
        fstype: xfs
        opts: "{% if fcoe is defined %}_netdev{% else %}defaults{% endif %}" 
        path: /var/lib/docker
        state: mounted
