(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{144:function(e,t,a){"use strict";a.r(t);var n=a(0),s=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"getting-started-with-knative"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-started-with-knative","aria-hidden":"true"}},[e._v("#")]),e._v(" Getting started with knative")]),a("p",[e._v("This post is based on "),a("a",{attrs:{href:"https://github.com/knative/docs/blob/master/install/getting-started-knative-app.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/knative/docs/blob/master/install/getting-started-knative-app.md")])]),a("p",[e._v("This post uses the Hello World sample app in Go to demonstrate the basic workflow for deploying an app.")]),a("h1",{attrs:{id:"install-knative"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install-knative","aria-hidden":"true"}},[e._v("#")]),e._v(" Install knative")]),a("p",[e._v("Following the instructions at "),a("a",{attrs:{href:"https://github.com/knative/docs/blob/master/install/Knative-with-any-k8s.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/knative/docs/blob/master/install/Knative-with-any-k8s.md")])]),a("h2",{attrs:{id:"install-istio"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install-istio","aria-hidden":"true"}},[e._v("#")]),e._v(" Install Istio")]),a("p",[e._v("Try to install Istio using the following command:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("kubectl apply --filename https://github.com/knative/serving/releases/download/v0.4.0/istio-crds.yaml && \\\nkubectl apply --filename https://github.com/knative/serving/releases/download/v0.4.0/istio.yaml\n")])]),a("p",[e._v("You will probably see the error:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('The Service "istio-ingressgateway" is invalid: spec.ports[0].nodePort: Invalid value: 31380: provided port is not in the valid range. The range of valid ports is 32768-35535\n')])]),a("p",[e._v("You need to download the "),a("a",{attrs:{href:"https://github.com/knative/serving/releases/download/v0.4.0/istio-crds.yaml",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/knative/serving/releases/download/v0.4.0/istio-crds.yaml")]),e._v(" file locally and modify the ports used, to fall within this range:")]),a("p",[e._v("Change the "),a("code",[e._v("nodePort")]),e._v(" values from 31380, 31390, 31400 to  33380, 33390, 33400:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("...\napiVersion: v1\nkind: Service\nmetadata:\n  name: istio-ingressgateway\n  namespace: istio-system\n  annotations:\n  labels:\n    chart: gateways-1.0.1\n    release: RELEASE-NAME\n    heritage: Tiller\n    app: istio-ingressgateway\n    istio: ingressgateway\nspec:\n  type: LoadBalancer\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n  ports:\n    -\n      name: http2\n      nodePort: 31380\n      port: 80\n      targetPort: 80\n    -\n      name: https\n      nodePort: 31390\n      port: 443\n    -\n      name: tcp\n      nodePort: 31400\n      port: 31400\n....\n")])]),a("p",[e._v("to:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("...\napiVersion: v1\nkind: Service\nmetadata:\n  name: istio-ingressgateway\n  namespace: istio-system\n  annotations:\n  labels:\n    chart: gateways-1.0.1\n    release: RELEASE-NAME\n    heritage: Tiller\n    app: istio-ingressgateway\n    istio: ingressgateway\nspec:\n  type: LoadBalancer\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n  ports:\n    -\n      name: http2\n      nodePort: 33380\n      port: 80\n      targetPort: 80\n    -\n      name: https\n      nodePort: 33390\n      port: 443\n    -\n      name: tcp\n      nodePort: 33400\n      port: 31400\n...\n")])]),a("p",[e._v("Re-apply, using the modified local file:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("kubectl apply --filename istio.yaml\n")])]),a("p",[e._v("Label the default namespace with "),a("code",[e._v("istio-injection=enabled")]),e._v(":")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# kubectl label namespace default istio-injection=enabled\n")])]),a("p",[e._v("Monitor the Istio components until all of the components show a STATUS of Running or Completed:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# kubectl get pods --namespace istio-system\n")])]),a("h2",{attrs:{id:"install-knative-and-dependencies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install-knative-and-dependencies","aria-hidden":"true"}},[e._v("#")]),e._v(" Install knative and dependencies")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("kubectl apply --filename https://github.com/knative/serving/releases/download/v0.4.0/serving.yaml \\\n--filename https://github.com/knative/build/releases/download/v0.4.0/build.yaml \\\n--filename https://github.com/knative/eventing/releases/download/v0.4.0/release.yaml \\\n--filename https://github.com/knative/eventing-sources/releases/download/v0.4.0/release.yaml \\\n--filename https://github.com/knative/serving/releases/download/v0.4.0/monitoring.yaml \\\n--filename https://raw.githubusercontent.com/knative/serving/v0.4.0/third_party/config/build/clusterrole.yaml\n")])]),a("p",[e._v("If you see an error such as:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('unable to recognize "https://github.com/knative/eventing/releases/download/v0.4.0/release.yaml": no matches for kind "ClusterChannelProvisioner" in version "eventing.knative.dev/v1alpha1"\nunable to recognize "https://github.com/knative/eventing/releases/download/v0.4.0/release.yaml": no matches for kind "ClusterChannelProvisioner" in version "eventing.knative.dev/v1alpha1"\n')])]),a("p",[e._v("you may be hitting a known issue:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("https://github.com/knative/eventing/issues/680\n\nIt fails the first time because the `ClusterChannelProvisioner` CRD hasn't been fully reconciled yet when the in-memory-channel provisioner is created. The second time usually succeeds (because the CRD has been reconciled by then).\n")])]),a("p",[e._v("Simply re-run the command a second time to re-apply the same files.")]),a("p",[e._v("Monitor the Knative components until all of the components show a STATUS of Running:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("kubectl get pods --namespace knative-serving\nkubectl get pods --namespace knative-build\nkubectl get pods --namespace knative-eventing\nkubectl get pods --namespace knative-sources\nkubectl get pods --namespace knative-monitoring\n")])]),a("h1",{attrs:{id:"deploying-your-serverless-app"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deploying-your-serverless-app","aria-hidden":"true"}},[e._v("#")]),e._v(" Deploying your serverless app")]),a("p",[e._v("To deploy an app using Knative, you need a configuration .yaml file that defines a Service.")]),a("p",[e._v("This configuration file specifies metadata about the application, points to the hosted image of the app for deployment, and allows the deployment to be configured.")]),a("p",[e._v("Create a new file named "),a("code",[e._v("service.yaml")]),e._v(" with the following content:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# cat service.yaml\n\napiVersion: serving.knative.dev/v1alpha1 # Current version of Knative\nkind: Service\nmetadata:\n  name: helloworld-go # The name of the app\n  namespace: default # The namespace the app will use\nspec:\n  runLatest:\n    configuration:\n      revisionTemplate:\n        spec:\n          container:\n            image: gcr.io/knative-samples/helloworld-go # The URL to the image of the app\n            env:\n              - name: TARGET # The environment variable printed out by the sample app\n                value: "Go Sample v1"\n')])]),a("p",[e._v("From the directory where the new "),a("code",[e._v("service.yaml")]),e._v(" file was created, apply the configuration:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# kubectl apply --filename service.yaml\n\nservice.serving.knative.dev/helloworld-go created\n")])]),a("p",[e._v("Now that your service is created, Knative will perform the following steps:")]),a("ul",[a("li",[e._v("Create a new immutable revision for this version of the app.")]),a("li",[e._v("Perform network programming to create a route, ingress, service, and load balancer for your app.")]),a("li",[e._v("Automatically scale your pods up and down based on traffic, including to zero active pods.")])]),a("h1",{attrs:{id:"interacting-with-your-app"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interacting-with-your-app","aria-hidden":"true"}},[e._v("#")]),e._v(" Interacting with your app")]),a("p",[e._v("To see if your app has been deployed succesfully, you need the host URL and IP address created by Knative.")]),a("p",[e._v("Use "),a("code",[e._v("kubectl get svc")]),e._v(" to see the details of the service:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@hpe-ansible knative]# kubectl get svc istio-ingressgateway --namespace istio-system\nNAME                   TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)                                                                                                                   AGE\nistio-ingressgateway   LoadBalancer   10.96.72.109   <pending>     80:33380/TCP,443:33390/TCP,31400:33400/TCP,15011:33994/TCP,8060:34944/TCP,853:35094/TCP,15030:33326/TCP,15031:34179/TCP   1h\n")])]),a("p",[e._v("Patch the type to be "),a("code",[e._v("NodePort")]),e._v(":")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# kubectl -n istio-system patch svc istio-ingressgateway --type=\'json\' -p \'[{"op":"replace","path":"/spec/type","value":"NodePort"}]\'\n\nservice/istio-ingressgateway patched\n')])]),a("p",[e._v("And patch the port to be, for example, "),a("code",[e._v("33333")]),e._v(":")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# kubectl -n istio-system patch svc istio-ingressgateway --type=\'json\' -p \'[{"op": "add", "path":"/spec/ports/0/nodePort", "value":33333}]\'\n\nservice/istio-ingressgateway patched\n')])]),a("p",[e._v("Check that the changes to the service have been made:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# kubectl get svc istio-ingressgateway --namespace istio-system -o yaml\n")])]),a("h1",{attrs:{id:"test-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-service","aria-hidden":"true"}},[e._v("#")]),e._v(" Test service")]),a("p",[e._v("To find the host URL for your service, enter:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# kubectl get ksvc helloworld-go  --output=custom-columns=NAME:.metadata.name,DOMAIN:.status.domain\n\nNAME                DOMAIN\nhelloworld-go       helloworld-go.default.example.com\n")])]),a("p",[e._v("Simply use "),a("code",[e._v("curl")]),e._v(" to test the service, specifing the appropriate port and domain:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# curl -vH "Host: helloworld-go.default.example.com" http://hpe2-ucp01.am2.cloudra.local:33333\n\nHello Go Sample v1!\n')])]),a("h1",{attrs:{id:"teardown"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#teardown","aria-hidden":"true"}},[e._v("#")]),e._v(" Teardown")]),a("p",[e._v("To remove the sample app from your cluster, delete the service record:")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# kubectl delete --filename service.yaml\n")])])])}],!1,null,null,null);t.default=s.exports}}]);