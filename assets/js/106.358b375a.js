(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{244:function(e,t,n){"use strict";n.r(t);var s=n(0),a=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"using-nfs-vm-when-deploying-nfs-provisioner-for-kubernetes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#using-nfs-vm-when-deploying-nfs-provisioner-for-kubernetes","aria-hidden":"true"}},[e._v("#")]),e._v(" Using NFS VM when deploying NFS provisioner for Kubernetes")]),e._v(" "),n("h2",{attrs:{id:"prerequisites"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites","aria-hidden":"true"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),n("ul",[n("li",[e._v("Configure the variables described in the section "),n("code",[e._v("Kubernetes Persistent Volume configuration")])]),e._v(" "),n("li",[e._v("Install the "),n("code",[e._v("kubectl")]),e._v(" binary on your Ansible box")]),e._v(" "),n("li",[e._v("Install the UCP Client bundle for the "),n("code",[e._v("admin")]),e._v(" user")]),e._v(" "),n("li",[e._v("Confirm that you can connect to the cluster by running a test command, for example, "),n("code",[e._v("kubectl get nodes")])])]),e._v(" "),n("h2",{attrs:{id:"configurating-nfs-vm-for-post-deployment-verification"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configurating-nfs-vm-for-post-deployment-verification","aria-hidden":"true"}},[e._v("#")]),e._v(" Configurating NFS VM for post-deployment verification")]),e._v(" "),n("p",[e._v("In this example, it is assumed that the relevant variables are configured as follows:")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[e._v("Variable")]),e._v(" "),n("th",{staticStyle:{"text-align":"left"}},[e._v("Value")])])]),e._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("nfs_provisioner_namespace")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("code",[e._v("nfsstorage")])])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("nfs_provisioner_role")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("code",[e._v("nfs-provisioner-runner-vm")])])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("nfs_provisioner_serviceaccount")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("code",[e._v("nfs-provisioner")])])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("nfs_provisioner_name")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("code",[e._v("hpe.com/nfs-vm")])])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("nfs_provisioner_storage_class_name")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("code",[e._v("nfs-vm")])])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("nfs_provisioner_server_share")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("code",[e._v("/k8s")])])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("nfs_mount_options")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("code",[e._v("'rw,sync,actimeo=0'")])])])])]),e._v(" "),n("p",[e._v("In this instance, the variable "),n("code",[e._v("nfs_external_server")]),e._v(" is commented out, resulting in the NFS VM being used, rather\nthan any external server.")]),e._v(" "),n("p",[n("strong",[e._v("Note:")]),e._v(" When using an external NFS server such as the one hosted by 3PAR, you need to create the file shares manually as shown in the previous section. If you are using the NFS VM, the file share is created automatically when running "),n("code",[e._v("site.yml")]),e._v(" by the playbook "),n("code",[e._v("playbooks/install_nfs_server.yml")]),e._v(". If you wish to change the\nfile share after initial deployment, you must update the variable "),n("code",[e._v("nfs_provisioner_server_share")]),e._v(" and then re-run the playbook "),n("code",[e._v("playbooks/install_nfs_server.yml")]),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"running-the-playbook"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#running-the-playbook","aria-hidden":"true"}},[e._v("#")]),e._v(" Running the playbook")]),e._v(" "),n("p",[e._v("Once the prerequisites are satisfied, run the appropriate playbook on your Ansible node:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# cd ~/Docker-Synergy\n# ansible-playbook -i hosts playbooks/nfs-provisioner.yml --vault-password-file .vault_pass\n")])])]),n("p",[e._v("Running the command "),n("code",[e._v("kubectl get sc")]),e._v(" will show the storage class named "),n("code",[e._v("nfs-vm")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# kubectl get sc\n\nNAME      PROVISIONER   AGE\nnfs-vm     hpe.com/nfs-vm     5m\n")])])]),n("p",[e._v("The playbook has a built-in test to validate the provisioining. A pod is deployed to write some test content:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('templates/nfs-provisioner/nfs-provisioner-writer-pod.yml.j2\n\nkind: Pod\napiVersion: v1\nmetadata:\n  name: writer-pod\nspec:\n  containers:\n  - name: writer-pod\n    image: gcr.io/google_containers/busybox:1.24\n    command:\n      - "/bin/sh"\n    args:\n      - "-c"\n      - "echo \'{{ TestMessage }}\' >/mnt/bar.txt && while [ 1 ] ; do sleep 2 ; done "\n    volumeMounts:\n      - name: nfs-pvc\n        mountPath: "/mnt"\n  restartPolicy: "Never"\n  volumes:\n    - name: nfs-pvc\n      persistentVolumeClaim:\n        claimName: test-claim\n')])])]),n("p",[e._v("This pod is then deleted, and a new pod is deployed to check that the test content has been persisted after the\nwriter pod went away.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('templates/nfs-provisioner/nfs-provisioner-reader-pod.yml.j2\n\nkind: Pod\napiVersion: v1\nmetadata:\n  name: reader-pod\nspec:\n  containers:\n  - name: reader-pod\n    image: gcr.io/google_containers/busybox:1.24\n    command:\n      - "/bin/sh"\n    args:\n      - "-c"\n      - "cat /mnt/bar.txt  && while [ 1 ] ; do sleep 1 ; done "\n    volumeMounts:\n      - name: nfs-pvc\n        mountPath: "/mnt"\n  restartPolicy: "Never"\n  volumes:\n    - name: nfs-pvc\n      persistentVolumeClaim:\n        claimName: test-claim\n')])])]),n("p",[e._v("You should see the following output if the provisioning succeeds:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('ok: [localhost] => {\n    "msg": "Successfully tested NFS persistent storage"\n}\n')])])])])}],!1,null,null,null);t.default=a.exports}}]);